Devops
=======================================================

Linux  - Navgating through file
========================================================

1. grep 
Using the grep command... This hellps one to find a word within a text file. 

->> grep firewall anaconda ks.cfg 
This will find all word 'Firewall' within the text file. 

===============================================================
 can also be used to find words within a directory
-->> grep -i install *
-->> grep -R install * 
-->> grep -iv install anaconda.ks.cfg
>> Do not show install in with =in the text file 
============================================================


2. less
"less" is a reader. It display contents of file. 
use "q" to end the reader mode and "/" to search for words. 

==============================================================
 
3. more 

Its also like less and a reader. use enter to move downwards the words. use q to quit. 

===============================================================

4. head 
the head command is used to to display the first 5 lines of  a text. 

-->> head -20 anaconda.txt 
The "-20" display a count of 20 first lines of the text. 

==================================================================

5. tail 
Use to view the end of a text. Similar to the head. 
tail has a function that reads changes wilthin a text. thus 

-->> tail -f ananconda.txt


cd /var/log/ >>> shows us the  logs for the  server you have loggin to. 
an example the "yam.log"
-->> tail -f yam.log
-->> cat messages 
-->> tail -f var/log/messages 
this shows the details of loggin into the system and aids  in troubleshooting. 

=================================================================

6. cut

-->> cat /etc/passwd
dispays user password and username that had loggin into the system. The first names are the user name. and the semi collon seprate them with other informations. to get only the usernames, use this commands. 

-->> cut -d: -f1 /etc/passwd
 

=================================================================


7. awk 
This is used for interligent search, expecially where there is a proper well seperators within the search

-->> awk -F' :' {print $1}' /etc/passwd
 
================================================================


8. how to replace words in an file.. 
the first way of doing this is to use VIM text editor./
-->> :&s/corovavirus/covid19 

this will change the word per line. to change it everywhere, use this command

-->> :&s/coronavirus/covid19/g

the second way is to use the sed command.
-->>sed 's/covid19/kdb/g' scaf

-->> sed  's/covid19/kdb/g' * will replace all word in that directory 

-->>sed -i 's/covid19/kdb/g' scaf   -- can be used in the reversal form. 
===============================================================================================================================================================================================================


REDIRECTION IN LINUX -- OUTPUT AND INPUT
=====================================================================



with redirection, the > is used to send the output into a file. 
-->> uptime > /tmp/time.txt
-->> ls > /tmp/time.txt


-->> free -m {This will show you the memory of the virtual device}
-->> df -h {This shows the partitions of the disk}
-->> echo {this is a print command}
eg... -->> echo "good morning "


When you do not want to see the out or redirect the output to somewhere you wont see, the use this directory.

-->> /dev/null

eg. 

--> yum install vim -y > dev/null

/dev/null can also be used to delete a content of a file by redirecting the null to the file.

--> cat /dev/null > /tmp/nana.txt


Errors can also be redircted to see prevent it from printing on the screen. these are stored in the .log files.. logs are found in the 
/var/logs -- directories


Another command used is the command that allows us to counnt number of files in a directory


-->> wc -1 /etc/passwd
-->> [root@localhost etc]# ls | wc -l
-->> tail -20 /var/log/messages | grep -i vagrant 


-->> How to find a w
--> use the find command to search from files with the file name. 


Another command that helps you to find stuffs is the locate command
-- to do this, yo will have to install the locate command before you can useit . 

-->> yum install mlocate -y  
-->> updatedb  
this is use to update the ceailes in the VM. 
-->> locate ==== to find what you are looking for. 
=====================================================================

V31. 

NEXT UNIT ==>> USERS AND GROUPS. 
------------------------------------------------------------------------------------------------------------------------------------------
 :: USers and groups are used to control access to files and resources
 :: User logins to the system by supplying their username and password
 :: Every file on the system is owned by a user and associated with a group
  :: Every process has an owner and group affiliat, and can only access the resources it owner or group can access. 
  :: Every user of the system is assigned a unique user ID number (the UID)
  :: User name and UID are stored in  /etc/passwd
  :: USer's password is stored in /etc/shadow in ecryoted form 
  :: Users are assigned a home directory and a program that run when they login (Usually a shell). 
  :: Users cannot read, write or execute each other's files without permission. 

---------------------------------------------------------------------
- There are three kinds of users in LINUX
 ROOT
 REGULAR
 SERVICE 
---------------------------------------------------------------------


-->> head -1 /etc/passwd
This shows us a line of password in the
==>> root:x:0:0:root:/root:/bin/bash

root - Shows the kind of user using the system. 
x - shows that the password is encrypted. (shadow file)
0 - User ID is 0
0 - group user ID is also 0 
root  - This is the comment


---------------------------------------------------------------------
Eg 2. 


-->> grep vagrant /etc/passwd
==>> vagrant:x:1000:1000:vagrant:/home/vagrant:/bin/bash
vagrant - shows the  user name
x - Shadow file 
1000 - is the user group 
1000 - is the group id
var=grant  - comment 
:/home/vagrant:/bin/bash - Directory for the shell 

 
----------------------------------------------------------------------GROP file
-->> cat /etc/group 


HOW TO CREATE A GROUP 
=====================================================================Using the 'id' command displays the user group. Etc. 
-
useradd ansible
useradd jenkins
useradd aws
-- This is used to creat user before you attach them to a groups


-"groupadd" to add groups to your system 

====================================================================

HOW TO LINK A USER TO A GROUP. 
-------------------------------------------------------------------
-->> usermod -aG devops ansible
G -- is for secondary group 
g -- is for primary group 

Also you can open the /etc/group file and add the user to the group and save... YOU Can do this thorugh VIM. 

HOW TO ADD PASSWORD TO USER
--------------------------------------------------------------------

-->> passwd ansible
- This will anable you to set a password for a user. 

-->> su - ansible
- This will enable you to switch users... 
- You have to know the password for each user id

-------------------------------------------------------------------

-->> last 
- Shows you the users who logged in to the system. 

-->> who 
- show you the current loggin user 

-->> whoami

-->> lsof -u vagrant
- This will list all folders or Dir opened by user vagrant..or other user preferred. 

-- --> yum install lsof
- This is to install the lsof feature on your system.

------------------ ---------------------------------------------------

HOW TO DELETE A USER 
---------------------------------------------------------------------
-->> userdel asw 
 - This will delete the user but will not delete the directory from home. 

 -->> userdel -r jenkins 
 - This will delete both user and the folder. 

-->> groupdel 
- This will delete the group

==========================================================================================================================================

FILE PERMISSION 
---------------------------------------------------------------------
- File permission may be viewed using ls -l 
Eg.1
-->> ls -l /bin/login

- Four symbol are used when displaying permissions: 
------------------------------------------------------------------------
r: permssion to read a file or list a directory's contents
w:              write a file or create and remove files from a directory
x:              to execute a program or change into a directory and do a long listing of the directory
-:              no permission (in place of the r, w, or x)

------------------------------------------------------------------------

- ==> filetype
rw- ==> user 
--- ==> group 
--- ==> other 
. 1 root root 2300 Dec 10 19:35 anaconda-ks.cfg
drwxr-xr-x. 2 root root    6 Nov 20 12:46 devopsdir
-rw-r--r--. 1 root root    1 Nov 27 17:38 good morning

HOW TO CHANGE USER PERMISSION AND GROUPS
------------------------------------------------------------------------
-->> chown ansible:devops /opt/devopdir
- This is used to change the user and group permissions to a folder/directory with the files in them,

-->> chmod g+r /opt/devopsdir
- This means add write privillages to groups.

========================================================================

CHANGING PERMISSIONS __ NUMERIC METHOD
------------------------------------------------------------------------
This uses a three-digits mode numbers 
-first digit specifies owners permissions (User)
-secon digit specifies groups permissions 
-third digit specifies others permissions

---- Permissions are calculated by adding::
- 4 (for read)
- 2 (for write)
- 1 (execute)

chmod 640 myfile

 ----------------------------------------------------------------------------------------------------------------------------------------------


 SUDO
 =======================================================================

 sudo gives power to a normal user to execute commands which is owned by the root user. 
 
 The sudoer file is located at 
 -->> ls -l /etc/sudoer 

 - To add a user to the sudoer, You edit the sudoer file and add ther the user to it... 
 - In order not to be asked passwd everyime, add "NOPASSWD: ALL" to the Sudoer file on the line of the user. 


 ==============================================================================================================================================

 PACKAGE MANAGEMENT 
 =======================================================================

To install manually a package, you download the package repository with the .rpm format. 

-->> curl "download program path" -o "program name"
-->> rpm -ivh "program name"

--ivh = means install, verbose which means print and h in a human readerable format. 
-- Uvh = means to upgrade the package
-- ev = to remove the package 
-- qa = list all rpm
-- qi = Display installed information along with package version
-- qf = Find out what package a file belongs to
-- qc = Display list of configuration
================================================================================================================================================

The best one to use is the yum. 
-->> cd /etc/yum.repos.d/

In this directory all the the download content in centos7 can be found and downloaded. this is done by using the yum command.

-->> yum install httpd 
-->> yum remove  httpd 
 
=======================================================================

SERVICES
================================================================================================================================================

After installing a package. the services of the package installed will be running on your machine. 
this services are managed by the 
-->> systemctl status httpd

-The services might be inactive. So to make the system active, use this command to activate it. 

-->>  systemctl start httpd 
-->>  systemctl status httpd 
-->>  systemctl reload httpd 
-->>  systemctl restart httpd 


You can restart and reload the services. 
When you check a services running after a reboot of your machine, 
the services will not run. you will have to enable or restart the services
for it to run on your machine. 
-->> sudo rebot 
- This will reboot your VM 

-->> systemctl  at the boot time. thus the services has be configured 
to run as soon as the VM  is turned on. 

-->> systemctl enable httpd
This will activate the services after the boot time. 

-->>  systemctl is-active httpd  
- To check the status of the services. Whether it is actvive and running. 

-->>  systemctl is-enable httpd  
- To check if the services enable for boot time. 

-->> cat /etc/systemd/system/multi-user.target.wants/httpd.service
- This is the configuration file created when the service got installed 
=============================================================================
PROCESSES
==========================================================================

-->> top
- Its is like the task manager on windows. It basically gives all information
on the processes currently running on the centos7 OS. 
-Its shows the load the averge within the system. thus for current, 
after 5mins and after 15mins.
The load average indicates the CPU consumtion.

- It shows the number of task. Processes are called tasks.
- It shows the memory status as well which can be seen using the 
free -m command. 

PID - Process ID 
USER - the user that are running the processes 
S - Sleeping
%MEM - memory its is using 
%CPU - CPU usage of the services

--------------------------------------------------------------------------------

-->> ps aux
- Smilar to top but shows you the information and exits. 

-->> ps -ef 
- This will also show you all the processes but will indicate 
the parent and the child processes as well. 

-------------------------------------------------------------------------

-->> kill <proceess ID>
-This stops the processes runing including the child processes. 

-->> kill -9 <parent ID>
- This time its not going to kill the child processes 
the children processes can be many and hence to kill them 
we will have to filter them into smaller scale to do that. 
--the orhpan process are the process running after the parent processes 
being killed. They dont cause much problems but consumes processes
spaces and memory. 
Zombie process are those in the top command processes that are 
not running. They can be cleared by rebooting your system.


-->> ps -ef | grep httpd | grep -v 'grep' | awk '{print $2}' | xarg kill -9
- This will turn all the children processes into argument and 
it will be killed wtih -9
----------------------------------------------------------------------------------
======================================================================================

ARCHIVING
====================================================================================

We are going to achive a log file. 
1. tar command 
2. zip command 

TAR
---------------------------------------------------------------------
-->> cd /var/log
-->> tar -czvf JenkinsNana_27022023.tar.gz JenkinsNana

-c - ARCHIVING
-z - Compress
-v - Verbose (Display in user readable format)
-f - Force 
 
-->> file JenkinsNana_27022023.tar.gz
- This tells you the file type. 

-->> tar -xzvf JenkinsNana_27022023.tar.gz 
-x - UNARCHIVING 

--> tar -xzvf JenkinsNana_27022023.tar.gz -C /opt/
-C allow you to extract to a specific folder or directory. 
----------------------------------------------------------------------------------
ZIP 
-------------------------------------------------------------------------------------------

-->> zip -r JenkinsNana_34000.zip JenkinsNana

-->> ls -ltr 

Lets move to opt Directory and unzip 

-->> unzip JenkinsNana_34000.zip

==============================================================================================
SOME UBUNTU COMMANDS 
==============================================================================================

-->> cat /etc/os-release 
-->> pwd
-->> sudo - i 
-->> useradd (centos7)
-->> adduser (ubuntu) This will practically create a home directory 
for the user. And hence makes Navgating very easy. 

-->> visudo  (To cheange the sudoer and add permissions to users){Cento7}
- This will be edited in the nano editor. since its the default editor.
To change the editor, 

-->> export EDITOR=vim
If you logout and login, you will have to do it again. To make this permanent
you will have to use bash scripting to program it. 


-->> dpkg -l
to check all demeon installed applications on the system. 

-->> dpkg -r <package>
-This is to uninstall the package


-->> cd /etc/apt/ 
-->> cat /etc/apt/sources.d 
shows all the urls of application withn the ubuntu operating system software

-->> apt install tree
-->> apt update 
-To check the list of install packages

-->> apt upgrade 
-upgrade all the packages. 
 
-->> apt remove tree
-This will remove the package but the configurations will still reamin.

-->> apt purge tree
This will remove package with all its configs 

=================================================================================
===================================================================================
===============================================================================
 
VAGRANT && LINUX SERVICES
========================================================================================

==>> vagrant global-status 
==>> vagrant status

To set a static IP donfiguration for your vagrant file. 
Edit the vagrant file and uncomment the static IP adddress. 
# make sure it does not overlap with your own IP address. 

The CPU and amount of RAM size can be changed. 
   config.vm.provider "virtualbox" do |vb|
  #   # Display the VirtualBox GUI when booting the machine
  #   vb.gui = true
  #
  #   # Customize the amount of memory on the VM:
     vb.memory = "1600"
     vb.cpus = 2

===========================================================================================
============================================================================================

42. VAGRANT SYNC. & DIRECTORIES 
===============================================================================================
When you create a files and folder in the vagrant files, The files are 
sync.ed into the vagrant folder on your desktop.
-- If you want to keep important files, you can sync them into your 
   vagrant folder for preservation. 
    The vagrang absolute syn file is \vagrant\

==>> touch devopsscripts {1...8}.sh 

With this, you can use your graphic editor to write your scripts and then 
run them in the VM machine (or OS). 

-- You can also create your own absolute syn directory. 
With this you will have to edit the vagrant file. and set the folder path 
as follow.
 NB.
 Dont forget to use double " \\ " for your windows file path directory. 

-==config.vm.synced_folder "C:\\vagrant-vms", "/vagrant_data"

==================================================================================================
PROVISIONING
==========================================================================================

You will have to edit the vagrant-file. The last part of the vagrant file. 

  # Enable provisioning with a shell script. Additional provisioners such as
  # Ansible, Chef, Docker, Puppet and Salt are also available. Please see the
  # documentation for more information about their specific syntax and use.
   config.vm.provision "shell", inline: <<-SHELL
     apt-get update
     apt-get install -y apache2
   SHELL
end

The shell can be diffirent. Just like in the bash script command. 
So this script runs everytime the VM is booted up. It is done by default within 
the vagrant file. 
-- In the case the Ubuntu is up, 
==>> vagrant reload --provision 

Use this command to call the edited provision script to run during 
booting of the VM.. 



============================================================================================
============================================================================================
WEBSITE SETUP
=====================================================================================================

Provision a new centos7 VM and download 
--httpd
--unzip
--wget

Start the services 
==>> systemctl status httpd
==>> systemctl enable httpd
==>> ip addr show 
3. Inet ip in the main browser shows that the ip address for centos7 
is working on your centos7 VM.

2: enp0s3: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc pfifo_fast state UP group default qlen 1000
    link/ether 08:00:27:da:d5:90 brd ff:ff:ff:ff:ff:ff
    inet 10.0.2.15/24 brd 10.0.2.255 scope global noprefixroute dynamic enp0s3
       valid_lft 80702sec preferred_lft 80702sec
    inet6 fe80::a00:27ff:feda:d590/64 scope link noprefixroute
       valid_lft forever preferred_lft forever
3: enp0s8: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc pfifo_fast state UP group default qlen 1000
    link/ether 08:00:27:d7:51:32 brd ff:ff:ff:ff:ff:ff
    inet 192.168.33.10/24 brd 192.168.33.255 scope global noprefixroute enp0s8
       valid_lft forever preferred_lft forever
    inet6 fe80::a00:27ff:fed7:5132/64 scope link
       valid_lft forever preferred_lft forever

--By deafault, and in linux the html file directory is located in the /var/www/html
directory. 

===>> cd /var/www/html/
==>> vi index.html 
This is to create a basic web page in the Linux system. 

==> systemctl restart httpd
- It is not neccessary to restart the httpd service but when there is a configuration 
changes, it is advisable to restart these services for it to run properly. 

-- Check from the browser if the IP address confirms the changes done 
by creating a html file. 
http://192.168.33.10/

Downloadng your website for testing.
Site: tooplate.com 
get the URL for download from the network tab by pressing F12 in your browser
application. 

==> wget  https://www.tooplate.com/zip-templates/2129_crispy_kitchen.zip
- This is to download the zip file.. 
-- Do this in the /tmp/ directory

==> unzip 2129_crispy_kitchen.zip
unzip to get the folder and copy it to your /var/www/html/ directory 

Do this whiles in the tmp directory and in the website folder. 
==>> cp -r * /var/www/html 

==>> systemctl restart httpd 
- To restore services, also check if the httpd service is running by using this 
commands

==>> systemctl status httpd 

Now refresh the browser to check if your site is hosted. 
============================================================================================
============================================================================================
============================================================================================
WORDPRESS - SETUP 
============================================================================================

This site will be a bit interactive than the first site hosted. 

Lets create a new VM for this... (UBUNTU)
Edit the Vagrant.file and use a static IP address. 
Launch the VM.. 


-- Check the wordpress on ubuntu on chrome... 
wordpress setup on ubuntu 
-- Follow the process and remember to set your password

Use the IP address setup to get to the wordpress...

============================================================================================
============================================================================================
============================================================================================
AOTOMATING THE WORDPRESS
============================================================================================

We have created a wordpress on Ubuntu and a website on centos7
We did that manually but we are going to do this from the vagrantfile.. 
Lets setup both on a the same VM. This can be done on Vagrant provision
Infrastruture as a code. (IAAC)
We use this process to provision the website as the VM is lauched. 

--------------------------------------------------------------------------------------------
Website
-------------------------------------------------------------------------------------------
-- Create a new VM (IAAS)
-- Create in folders (wordpress and website)
Now in the website directory. 
Create a centos7 vagrant file and edit its provision: 
Dont forget to setup IPs in your provision. 

   config.vm.provision "shell", inline: <<-SHELL
     yum install htppd wget unzip -y
	 systemctl start httpd
	 systemctl enable httpd
	 cd/tmp/
	 wget https://www.tooplate.com/zip-templates/2127_little_fashion.zip
	 unzip -o 2127_little_fashion.zip
	 cp -r 2127_little_fashion/* /var/www/html
	 systemctl restart httpd
	 
   SHELL
end

---------------------------------------------------------------------------------------
WORDPRESS
--------------------------------------------------------------------------------------------

Now in the website directory. 
Create an ubuntu  vagrant file and edit its provision: 
Dont forget to setup IPs in your provision. 
Yo can use this commands in your provision to set up your wordpress
automatically when the VM boots. 



   centos7_server.vm.provision "shell", inline: <<-SHELL
   yum install mariadb-server -y
   systemctl start mariadb
   systemctl enable mariadb

   mysql -u root -e 'CREATE DATABASE wordpress;'
   mysql -u root -e 'GRANT SELECT,INSERT,UPDATE,DELETE,CREATE,DROP,ALTER ON wordpress.* TO wordpress@localhost IDENTIFIED BY "admin123";'
   mysql -u root -e 'FLUSH PRIVILEGES;'
   SHELL
  end




============================================================================================
============================================================================================
============================================================================================
AOTOMATING THE WORDPRESS
============================================================================================

Multiples VMs can be created using only one vagrant file. The setup 
has the command below... \
==>> vagrant ssh <server_name> 
- this to bring up a server. 
==>> vagrant destroy <server_name>
If not done as such, the command will destroy both VM setup within 
Vagrantfile. 


Vagrant.configure("2") do |config|

  config.vm.define "ubuntu_server" do |ubuntu_server|
    ubuntu_server.vm.box = "ubuntu/bionic64"
	ubuntu_server.vm.network "private_network", ip: "192.168.40.11"
	ubuntu_server.vm.provider "virtualbox" do |vb|
     vb.memory = "1024"
	 vb.cpus = 2
   end
   ubuntu_server.vm.provision "shell", inline: <<-SHELL
     apt update
	 apt install apache2 wget unzip -y
	 systemctl start apache2
	 systemctl enable apache2
	 cd /tmp/
	 wget https://www.tooplate.com/zip-templates/2119_gymso_fitness.zip
	 unzip -o 2119_gymso_fitness.zip
	 cp -r 2119_gymso_fitness/* /var/www/html/
	 systemctl restart apache2
   SHELL
  end

  config.vm.define "centos7_server" do |centos7_server|
    centos7_server.vm.box = "centos/7"
    centos7_server.vm.network "private_network", ip: "192.168.40.12"
	centos7_server.vm.provider "virtualbox" do |vb|
     vb.memory = "1024"
	 vb.cpus = 2
   end
   centos7_server.vm.provision "shell", inline: <<-SHELL
   yum install mariadb-server -y
   systemctl start mariadb
   systemctl enable mariadb

   mysql -u root -e 'CREATE DATABASE wordpress;'
   mysql -u root -e 'GRANT SELECT,INSERT,UPDATE,DELETE,CREATE,DROP,ALTER ON wordpress.* TO wordpress@localhost IDENTIFIED BY "admin123";'
   mysql -u root -e 'FLUSH PRIVILEGES;'
   SHELL
  end
end


============================================================================================
============================================================================================
============================================================================================
VProfile Project Setup
============================================================================================

Multi Tier web Application Stack 
Setup on Laptop/Desktop 
Baseline for Upcoming Projects
Helps you setup any project 
============================================================================================
--SCENARIO 
Working on a project... Varieties of of services that powers your 
projects. 

-- PROBLEMS 
------------------------------------------------------------------------------------------------------
-Not Comfortable in making changes in real servers. 
- local setup is complex
- Time consuming 
- Not repeatable

-- SOLUCTION 
-----------------------------------------------------------------------------------------------
LOCAL setup 
Repeatable 
Automated 
CODE [IAAC]
R&D in your own machine

-- tools
----------------------------------------------------------------------------------------------------
Hypersor -- Oracle VM VirtualBox 
Automation -- Vagrant
CLI -- Gitbash 
IDE -- Sublime Text 

OBJECTIVE 
.................................................................................................
--VM automation locally 
--Baseline for upcomming projects 
--Real world project setup locally (for R&D)
-------------------------------------------------------------------------------------------------

ARCHITECTURE OF PROJECT SERVICES 
NGINX
TOMCAT 
RABBITMQ
MEMCACHED   
MYSQL 

--Users can access our services through the browers (IP) or endpoint. the user 
are redirected to a load balancer (NGIX). Thr NGIX is going to foreward the 
request to APPLICATION SERVER (APACHE TOMCAT) and an NFS shared storage. 
This is where the JAVA application will be running. The APPLICATION SERVER will foreward the 
request to RABBITMQ---> MEMCASH for data base cashing ---> MEMCASH is going 
to forward to cash the MySQL services from ther MySQL server. 

----------------------------------------------------------------------------------------------

Vagrant --->> Virtual Oracle ---> BASH ---->>
NGINX
Apache Tomcat 
MEMCACHD 
RABBITMQ
MySQL

Vagrant will communicate oracle box which is the hypersor, and use bash script to 
automante the next...

----------------------------------------------------------------------------------------------

FLOW OF EXECUTION 
------------------------------------------------------------------------------------------------
1. Setup pre-requisite tools 
2. Clone source code  
3. cd into the vagrant dir 
4. Bring up Vm's 
5. Validate all Virtual machine 
6. Set up all the services
7. Build a Java scripts and test project. 

------------------------------------------------------------------------------------------------
==================================================================================================
===================================================================================================

VM SETUP
1. Clone source code.
==>> git clone <url>
2. Cd into the repository.
3. Switch to the local-setup branch.
==>> git checkout local-setup
4. cd into vagrant/Manual_provisioning.

=====================================================================================================
SET UP db01 - DATA BASE VM
=====================================================================================================

log into db01 machine and setup the datadbase manchine
==>> sudo -i                          [To loggin as a root user]
==>> yum upgrade -y                   [To upgrade all packages or softwar in the VM]
==>> DATABASE_PASS='admin123'         [set up data base password]
-->> echo $ DATABASE_PASS             [This will show the password]
==>> vi /etc/profile                  [Edit this file and insert the data base passwd. to make it parmanent]
==>> source /etc/profile              [This will make the passwd.set to be parmanent]

==>> yum install epel-release -y      [This is to install the repository in the VM]
==>> yum install git mariadb-ser -y 
-----------------------------------------
Setting up the database system -- 
------------------------------------------

==>> mysql_secure_installation         [Follow the intstallation process and setup the mysql]
==>> 
==>> git clone -b local-setup https://github.com/devopshydclub/vprofile-project.git

==>> mysql -u root -p"$DATABASE_PASS" -e "create database accounts"
[To setup your mysql data base user account]

==>>  mysql -u root -p"$DATABASE_PASS" -e "grant all privileges on accounts.* TO 'admin'@'app01' identified by 'admin123' "
[this will add user - admin  and will be access in ap01]
--Login in database of the accounts systems. 

==>> mysql -u root -p"$DATABASE_PASS" accounts < src/main//resources/db_backup.sql
==>> mysql -u root -p"$DATABASE_PASS" -e "FLUSH PRIVILEGES"
==>> mysql -u root -p"$DATABASE_PASS"

MariaDB [(none)]> show databases; 




============================================================================================
============================================================================================
============================================================================================
Networking
============================================================================================

Components of a network 
-----------------------------------------------
1. Two or more computer/devices 
2. Cables as link between the computers
3. A network interfacing card (NIC) on each 
4. Computer
5. Routers 
6. Software called OS
7. Switches 

THE OSI MODEL 
----------------------------------------------
A commom plateform where commucation can communicate within a set of rules. It provides 
a standard that allow computing devices to connect and communicate between each other. 

The OSI model has seven layers of architetecture. Namely: 
7. Application
6. Presentation
5. Session
4. Transport 
3. Network 
2. Data link
1. physical 

:: The basic elements of layers models are:
-- services 
-- protocols
-- and interfaces 

Services is a set of actions that a layer offers to another (higher) layer. 
Protcol is a set of rules that a lauer uses to exchange information. 
An interface is communication between layers. 



OSI Model 
------------------------------------------------------------
physical--
-This is the lowest layer of the model. It comprises of the pysical components that forms 
up a network. These component are pysical cables that connect PC1 to PC2. 
The data transfered within this layer is called "bits"  
[Media, signal and binary transmission]
eg. hubs

data link--
- [Pysical addressing (MAC & LLC)]
The data is in frame... a combination of two or more bits. 
eg. bridges, layer 2 switches

Network-- 
[Path determination and logical addressing (IP)]
The mode of transpotation is in packets... 
eg. router, firewall / layer 3 switches  

--transport 
- [End to End connections of reliability]
The data is sent in segment
eg. gateway


--session
eg. web server 

--presentation 
eg. web server

--application
eg. web server
=--------------------------------------------------------------------------------

Classification of Networks by Geography
=================================================================================================
=================================================================================================
-- LAN [Local Area Network]
-- WAN [Wide area Network] 
-- MAN [Metropolitan Area Network]
-- CAN [Capus Area Network] / Intranet 
-- PAN []

Switches... 
--------------------------------------------------------------------------------------------------

Switches facillitate the sharing of resources by connection together all the devices, including 
computers,  printers, and servrs in a small bussiness network. 


Routers
--------------------------------------------------------------------------------------------
A router receives and sends data on computer networks. they are sometimes confused with 
network hubs, moderms or network swithches. However routers can combine multiples networks
together..


protocols
-----------------------------------------------------------------------------
In the networking and communication area,  a protocol is the formal  specification that defines 
the procedures that must be followed when transmitting  or recieving data. Protocols define the 
format, timing, sequence and error checking used on the network. 


TCP 
1. Reliabe protocol
2. Connection oriented
3. performs three ways handshake
4. Provision for error detectiona dnd retransmission
5. Most applications use TCP for reliabe and guranteed transmission 
6. FTP, HTTP. HTTPS 


PROTOCOLS AND PORT NO.s 
===================================================================================
-DNS       ---  UDP 53
-DNS TCP    --  TCP 53
-HTTP       --  TCP 80 
-HTTPS      --  TCP 443
-FTP        --  TCP 20, 21 
-SSH        --  TCP 22
-AFP IP      --  TCP 447, 548 
-POP         --  TCP 109, 110


C:\Users\Nana\Documents\Devop\Imran

=================================================================================
You  will have to be a root user to in order to issue these commands

==>> ifconfig
-- This will show you all the network interfaces. or the active network interfaces on
   on the device. 

enp0s3: flags=4163<UP,BROADCAST,RUNNING,MULTICAST>  mtu 1500
        inet 10.0.2.15  netmask 255.255.255.0  broadcast 10.0.2.255
        inet6 fe80::12:a5ff:fe46:f18c  prefixlen 64  scopeid 0x20<link>
        ether 02:12:a5:46:f1:8c  txqueuelen 1000  (Ethernet)
        RX packets 35889  bytes 32662822 (32.6 MB)
        RX errors 0  dropped 0  overruns 0  frame 0
        TX packets 15586  bytes 1141992 (1.1 MB)
        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0

enp0s8: flags=4163<UP,BROADCAST,RUNNING,MULTICAST>  mtu 1500
        inet 192.168.40.11  netmask 255.255.255.0  broadcast 192.168.40.255
        inet6 fe80::a00:27ff:fe12:f3c8  prefixlen 64  scopeid 0x20<link>
        ether 08:00:27:12:f3:c8  txqueuelen 1000  (Ethernet)
        RX packets 5  bytes 864 (864.0 B)
        RX errors 0  dropped 0  overruns 0  frame 0
        TX packets 12  bytes 936 (936.0 B)
        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0

lo: flags=73<UP,LOOPBACK,RUNNING>  mtu 65536
        inet 127.0.0.1  netmask 255.0.0.0
        inet6 ::1  prefixlen 128  scopeid 0x10<host>
        loop  txqueuelen 1000  (Local Loopback)
        RX packets 38  bytes 3818 (3.8 KB)
        RX errors 0  dropped 0  overruns 0  frame 0
        TX packets 38  bytes 3818 (3.8 KB)
        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0

-- LOOPBACK interface is used when the computer is refering to itself. It is the local interface
   interface  by which the network is connected. 


==>> ip addr show 
==>> ping  192.168.12 

-- To show that an IP address realy works. it checks if there is a connection between 
your machine and an IP address. So when you ping an IP, It sends packets to the IP 
and the IP reciprocates.

--- 192.168.40.11 ping statistics ---
58 packets transmitted, 58 received, 0% packet loss, time 58011ms
rtt min/avg/max/mdev = 0.022/0.055/0.959/0.123 ms
root@ubuntu-bionic:~#

====================================================================================================

==>> vi /etc/hosts
You can give the IP address of the target manchine name with the IP address. 

==>> ping ubuntu_server
==>> tracert <www.google>
it is used to check latency within our network. Its is used to  check the latency of the 
the network as the test indicates the connecting devices.
 

==>> netstat -antp 
This is going to show all the TCP open port in the current machine.

Active Internet connections (servers and established)
Proto Recv-Q Send-Q Local Address           Foreign Address         State       PID/Program name
tcp        0      0 127.0.0.53:53           0.0.0.0:*               LISTEN      661/systemd-resolve
tcp        0      0 0.0.0.0:22              0.0.0.0:*               LISTEN      1093/sshd
tcp        0      0 10.0.2.15:22            10.0.2.2:64560          ESTABLISHED 3331/sshd: vagrant
tcp        0      0 10.0.2.15:22            10.0.2.2:64941          ESTABLISHED 3702/sshd: vagrant
tcp        0      0 10.0.2.15:22            10.0.2.2:64877          ESTABLISHED 3568/sshd: vagrant
tcp        0      0 10.0.2.15:22            10.0.2.2:64770          ESTABLISHED 3466/sshd: vagrant
tcp6       0      0 :::80                   :::*                    LISTEN      3271/apache2
tcp6       0      0 :::22                   :::*                    LISTEN      1093/sshd


==>> ss -tunlp 
To see the open ports on your machine. 
---------------------------------------------------------------

==>>>> nmap
This is mostly use for troubleshooting purposes. Do not use it on a public website. 
you will have to install it. 
Scanning a port of a target. use nmap to scan an open port. Example is scanning two machine
to check if there are open ports availiable.


---------------------------------------------------------------

==>> nmap <centos7_server> 
-----------------------------------------------------------------

==>> dig <www.google.com>

---------------------------------------------------------------
; <<>> DiG 9.11.3-1ubuntu1.18-Ubuntu <<>> www.google.com
;; global options: +cmd
;; Got answer:
;; ->>HEADER<<- opcode: QUERY, status: NOERROR, id: 32285
;; flags: qr rd ra; QUERY: 1, ANSWER: 1, AUTHORITY: 0, ADDITIONAL: 1

;; OPT PSEUDOSECTION:
; EDNS: version: 0, flags:; udp: 65494
;; QUESTION SECTION:
;www.google.com.                        IN      A

;; ANSWER SECTION:
www.google.com.         162     IN      A       216.58.223.228

;; Query time: 240 msec
;; SERVER: 127.0.0.53#53(127.0.0.53)
;; WHEN: Tue Mar 28 14:36:18 UTC 2023
;; MSG SIZE  rcvd: 59

This shows us the DNS servers connected. To see the DNS resolution is working or not. 
--------------------------------------------------------------------

==>> nslookup www.google.com 
www.google.com.         162     IN      A       216.58.223.228

;; Query time: 240 msec
;; SERVER: 127.0.0.53#53(127.0.0.53)
;; WHEN: Tue Mar 28 14:36:18 UTC 2023
;; MSG SIZE  rcvd: 59

This is also used to check the DNS servers. 
----------------------------------------------------------------------

==>> route -n 
==>> route 

Kernel IP routing table
Destination     Gateway         Genmask         Flags Metric Ref    Use Iface
0.0.0.0         10.0.2.2        0.0.0.0         UG    100    0        0 enp0s3
10.0.2.0        0.0.0.0         255.255.255.0   U     0      0        0 enp0s3
10.0.2.2        0.0.0.0         255.255.255.255 UH    100    0        0 enp0s3
192.168.40.0    0.0.0.0         255.255.255.0   U     0      0        0 enp0s8

This is show us the gateways of the devices. 
------------------------------------------------------------------------

==>> mtr google.com

Its like the the trace route but in the form of live action.
If your system is slow i.e. transfering packets from one system to the other, 
try to find out where the packet loss is from by using this. 
Or it will reach. 
-------------------------------------------------------------------------

==>> telnet 

==>> arp 



============================================================================================
============================================================================================
============================================================================================
Containers 
============================================================================================
Get all details on containers on docker's plateform. Docker is an example 
https://docs.docker.com/get-started/overview/

Docker provides tooling and a platform to manage the lifecycle of your containers:

-- Develop your application and its supporting components using containers.
-- The container becomes the unit for distributing and testing your application.
-- When you’re ready, deploy your application into your production environment, as a 
   container or an orchestrated service. This works the same whether your production 
   environment is a local data center, a cloud provider, or a hybrid of the two.

====================================================================================================

Vagrant files contains all docker installation process... hence the docker sutup will 
be intalled whiles the bring up the VM. 

==>> systemctl status docker 
- This is to check whether the sutup is installed and running

==>> docker rum hello-world
- This is to test the docker application. 

==>> docker images
==>> docker ps 

CONTAINER ID   IMAGE     COMMAND                  CREATED        STATUS        PORTS                                   NAMES
e516423bee69   nginx     "/docker-entrypoint.…"   36 hours ago   Up 36 hours   0.0.0.0:9080->80/tcp, :::9080->80/tcp   web01

==>> docker ps -a 
==>> docker run --name web01 -d -p 9080:80 nginx

- We are creating a docker with name web01, -d means it should run in the background,
 -p means assigning port address to it her 9080 is the host port and 80 is container port. 
 This is known as port mapping. Containers are accessed outside hence the reason for port mapping. 

==>> docker inspect web01

- To access the container locally, an IP address is needed. This IP address is can be found 
using the command above. 
 "Gateway": "172.17.0.1",
                    "IPAddress": "172.17.0.2",
                    "IPPrefixLen": 16,
                    "IPv6Gateway": "",

# Run a container
------------------------------------------------------------------------------------------=
================================================================================================
==>> docker run --name web01 -d -p 9080:80 nginx
==>> docker ps 
-- This will display the port number :: eg. 8080

==>> docker inspect web01 
- This is to check on the IP address of the container. 

==>> curl http://172.17.0.2:80
-- To display docker home page in html format

==>> ip addr show
==>> docker ps

# Go to browser enter IP:HostPort
===================================================================================================
===================================================================================================
# Building an Image
======================================================================================================

==>> mkdir images
==>> cd images/
==>> vim Dockerfile

# Paste below content
====================================================================================================
FROM ubuntu:latest AS BUILD_IMAGE
RUN apt update && apt install wget unzip -y
RUN wget https://www.tooplate.com/zip-templates/2128_tween_agency.zip
RUN unzip 2128_tween_agency.zip && cd 2128_tween_agency && tar -czf tween.tgz * && mv tween.tgz /root/tween.tgz

FROM ubuntu:latest
LABEL "project"="Marketing"
ENV DEBIAN_FRONTEND=noninteractive

RUN apt update && apt install apache2 git wget -y
COPY --from=BUILD_IMAGE /root/tween.tgz /var/www/html/
RUN cd /var/www/html/ && tar xzf tween.tgz
CMD ["/usr/sbin/apache2ctl", "-D", "FOREGROUND"]
VOLUME /var/log/apache2
WORKDIR /var/www/html/
EXPOSE 80
====================================================================================================

# Build Image
==========================================================================================
===============================================================================================

==>> docker build -t tesimg .
==>> docker images

# Run container from our Image
==========================================================================================

==>> docker run -P -d tesimg . 
==>> docker ps

==>> docker ps
==>> ip addr show
==>> docker ps

# Go to browser enter IP:HostPort
===================================================================================================

# CLEAN UP
==========================================================

==>> docker ps
==>> docker stop web01 heuristic_hugle
==>> docker ps -a
==>> docker rm heuristic_hugle web01 competent_gates elastic_ramanujan relaxed_sammet
==>> clear
==>> docker images
==>> docker rmi a54ee9c44b3b 6130c26b5558 057d51c0049c 825d55fb6340 12766a6745ee feb5d9fea6a5

============================================================================================
============================================================================================
============================================================================================
Containers 2
===========================================================================================

Increase the memory on Vagrantfile to 2MB. 

# Create directory
==>> mkdir compose
==>> cd compose/

==========================================================================================

# docker-compose command
==>> docker-compose

- The docker compose command enable one to run two or more containers on a linux machine. 

# Download docker-compos.yml file for vprofile project
Configuration on docker file will be taugt in later sessions. 

==>> wget https://raw.githubusercontent.com/devopshydclub/vprofile-project/vp-docker/compose/docker-compose.yml
ls
==>> vim docker-compose.yml
===============================================================================================
# Bring up all the containers
==============================================================================================
==>> docker-compose up -d
==>> docker ps
==>> ip addr show

# Go to browser and enter VMIP:80




==================================================================================================
==================================================================================================
MICROSERVICES
==================================================================================================
==================================================================================================
MONOLITHIC
======================================
TOMCAT SERVICES ++

User interface 
Chat 
Post
Notification

======================================

User is a seperate application built using JAVA 
Chat application is buolt using NODE JS 
Notification is built in python 

https://aws.amazon.com/microservices/

==================================================================================================
==================================================================================================
==================================================================================================
==================================================================================================

# Clone source code of Emart App

git clone https://github.com/devopshydclub/emartapp.git

ls
cd emartapp/
ls
# Bring up  containers from docker-compose file
vim docker-compose.yaml
docker-compose up -d
docker ps
ip addr show
# Go to browser enter http://VMIp:80
# Clean up
docker-compose down

==================================================================================================
==================================================================================================
==================================================================================================


BASH SCRIPTING
=================================================================================================

  
#!/bin/bash

### This script  prints system info ###

echo " Welcome to bash script"
echo "#####################################################" 
echo 

# checking system uptime 
echo "This is the uptime of the VM"
uptime
echo "#####################################################" 
echo 

# Memory utiliztion 
echo "Memory Utilization" 
free -m 

# Disk Utiliztion
echo "####################################################"  
echo "Disk Utilization" 
df -h

======================================================================
======================================================================
======================================================================
VARIABLES
======================================================================
======================================================================
Depending on your projects, set up variables the processes that can be 
changed or replaced. 
== Use variables when to replace a repeated words in the scripts. 


#Variable Declaration
PACKAGE="httpd wget unzip"
SVC="httpd"
URL="https://www.tooplate.com/zip-templates/2132_clean_work.zip"
ART_NAME="2132_clean_work?
TEMPDIR="/tmp/webfiles" 



#!/bin/bash

# Installing dependencies 
echo "##############################################"
echo " Installing Packages"
echo "#############################################" 
echo 
sudo yum install wget unzip httpd -y > /var/null
echo 

# Start and Enables service 
echo "#############################################" 
echo "Start and Enable HTTPD Service" 
echo "############################################" 
echo  
sudo systemctl start httpd
sudo systemctl enable httpd 
echo 
# Creating Temp Directory
echo "############################################" 
echo "Start Artifact Deplyment" 
echo "###########################################" 
mkdir -p /tmp/webfiles
cd /tmp/webfiles
echo 
wget https://www.tooplate.com/zip-templates/2132_clean_work.zip > /var/null   
unzip 2132_clean_work.zip
sudo cp -r 2132_clean_work/* /var/www/html/
echo 

======================================================================
======================================================================
======================================================================

Command Line Arguments
 
 When we run a program on the command line you would be familiar with 
 supplying argument after it to control its behaviour. For instance we could run the 
 commnad ls -l /tmp. -l and /tmp are bpth command line arguments to the 
 commnad ls. 

 we can con similar with our bash script. To do this we use $1 to represent 
 the first command and $2 to represent the second command line argument and
 so on. These are automatically set by the system when we run our scripts. 
 So all we need to do is to refer them. 
0 is always the name of the script. 

#!bin/bash

echo "Value  of 0"        
echo $0

echo "Value of 1"
echo $1

echo "Value of  2"        
echo $2

echo "Value of 3"
echo $3

Within the webserver script, the script was written to take
the download address and the folder name to deploy the 
webservices. 


>> https://www.tooplate.com/zip-templates/2131_wedding_lite.zip
>> 2131_wedding_lite


https://www.tooplate.com/zip-templates/2129_crispy_kitchen.zip

======================================================================
======================================================================
======================================================================

SYSTEM ARGUMENTS
=====================================================================

There are a few other variables that the system sets for you to use as well. 

$0 -->> The name of the Bash Script 
$1 - 9 -->> The first 9 Arguments 
$# - How many arguments were passed to the bash script
$@ - All the arguments supplied to the Bash Script 
$? - The exit status of the most recently run process.
$$ - The process ID of the current script 
$USER - The username of the user running the script  
$HOSTNAME - The hostname of the machine the script is running on. 
$SECONDS - The number of seconds since the scripts was started. 
$RANDOM - Returns a different random number each time is it referred to. 
$LINENO - Returns the current line number in the bash script
===================================================================================
======================================================================
======================================================================
======================================================================

QUOTES
=====================================================================

==>> SKILL="Devops" 
==>> echo $SKILL 
==>> 

[root@scriptbox scripts]# SKILL="Devops"
[root@scriptbox scripts]# echo $SKILL
Devops
[root@scriptbox scripts]# SKILL='Devops'
[root@scriptbox scripts]# echo $SKILL
Devops
[root@scriptbox scripts]# echo "I have got $SKILL skill"
I have got Devops skill
[root@scriptbox scripts]# echo 'I have got $SKILL skill'
I have got $SKILL skill
[root@scriptbox scripts]# 


So basically this is the different b/n double quotes and single quotes
in bash scripting. 

To print a special character, you will have to use \$ to do that. 
Eg. 

[root@scriptbox scripts]# VIRUS="covid19" 
[root@scriptbox scripts]# echo "Due to $VIRUS, most companies lost \$9 million dollars"    
Due to covid19, most companies lost $9 million dollars


======================================================================
======================================================================
======================================================================
COMMAND SUBSTITION
=====================================================================

Variable defined in the script leave with it and dies after the script 
dies or completes. If we want to define  a variavle that is 
accessible to all the scripts from your currnt shell we need to export it.. 
Eg. 

[root@scriptbox scripts]# uptime
 23:45:52 up  1:46,  1 user,  load average: 0.00, 0.01, 0.05
[root@scriptbox scripts]# UP=`uptime`
[root@scriptbox scripts]# echo $UP
23:46:46 up 1:47, 1 user, load average: 0.00, 0.01, 0.05

-- The use of back text is to substitute a variables with a shell command. 


[root@scriptbox scripts]# CURRENT_USERS=$(who)
[root@scriptbox scripts]# echo $CURRENT_USERS
vagrant pts/0 2023-04-26 22:01 (10.0.2.2)

-- Brackets can also be used.. 

[root@scriptbox scripts]# free -m
              total        used        free      shared  buff/cache   available
Mem:            990         118         546           6         325         729
Swap:          1023           0        1023
[root@scriptbox scripts]# free -m | grep Mem
Mem:            990         118         546           6         325         729        
[root@scriptbox scripts]# free -m | grep Mem | awk '{print $4}' 
546
[root@scriptbox scripts]# FREE_MEM=free -m | grep Mem | awk '{print $4}'
-bash: -m: command not found
[root@scriptbox scripts]# FREE_MEM=`free -m | grep Mem | awk '{print $4}'`
[root@scriptbox scripts]# echo "Free RAM is $FREE_MEM mb."                              
Free RAM is 546 mb.

-- This is another example ||>> 

======================================================================
======================================================================
======================================================================
EXPOTING VARIABLES
=====================================================================

We have how to store a string/Text into a variable but somethimes you 
want to store output of a command to a variabl. Like you may need to store ls 
command output to a variable. For this we use command substitution. 

[root@scriptbox scripts]# sh testvar.sh
The  season is more than expected, this time.
[root@scriptbox scripts]# vim testvar.sh 
[root@scriptbox scripts]# SEASON="Monson"
[root@scriptbox scripts]# sh testvar.sh 
The  season is more than expected, this time.
[root@scriptbox scripts]# export SEASON
[root@scriptbox scripts]# sh testvar.sh 
The Monson season is more than expected, this time.

==>> export SEASON 
- Export will recall the variable in the child bash shell. 
when logout and login,  the variable is wiped out. 

There is a hiden file called ". bashrc"
Every user and will have a different .bashrc file. thus the root 
and the vagrant.... or any other user. 
You will have to edit the .bashrc file to insert your variable in other to 
use it. 

-- To male the variable global inresspective of the user, 
edit this file and add your variable. 
==>> vim /etc/profile 

======================================================================
======================================================================
======================================================================
USER INPUT
=====================================================================


Taking input for the user user while executing the script, storing it into a 
variable and then using that variable in our script. 

======================================================================
======================================================================
======================================================================
Remote command Execution 
=====================================================================

Setup for all 4 vagrant file. 
-->> vagrant up 
-->> vi /etc/hostname 
-->> hostname web01


Change hostnames for all vagrant boxes.. 
thus web01, web02, web03... leaving scriptbox 

-->> vagrant ssh scriptbox 
-->> sudo -i 
-->> vi /etc/host 

Copy and paste the IP addresses of all the vagrantboxes and paste
in the host file. 

192.168.10.13 web01
192.168.10.14 web02
192.168.10.15 web03

Now, you can access web01 from scriptbox. via,

-->> ssh vagrant@web01
PASSWORD for vagrant is vagrant 

change user to devops for all servers... 

-->> sudo -i 
-->> useradd deveps 
-->> passwd devops 
Repeat same password when asked again.......
Edit the sudoer file to prevent further question on the user accounts. 

-->> vi /etc/sudoer 
devops ALL=(ALL)  NOPASSWD:ALL 

Repeat same process for web02 and web03

For Ubuntu servers, you will need to allow keys ssh  to the machine. 
-->> vim /etc/ssh/sshd_config 
change "PasswordAuthentication" to yes. and restart the ssh services
-->> systemctl restart ssh 
-->> export EDITOR=vim 
-->> visudo 
This to get the sudoer's file in ubuntu.. 



======================================================================
======================================================================
======================================================================
SSH Key exchange
=====================================================================

SSH key exchange is much safer than the passwd. 

-->> ssh-keygen
This will generate our keys 

-->> ssh-copy-id devops@web01
This to apply lock.. 

-->> ssh devops@web01 uptime

In the home directory, there is a ssh directory which contains 
all the private and public key to login and and execute our command
 
======================================================================
======================================================================
======================================================================
Grand final
=====================================================================
create a folder in the scriptbox...(directory) 
in the directory, create a file witht list of servers. 

-->> mkdir websetup 
-->> vim remotehost
-web01
-web02
-web03 

Testing the servers... 
------------------------------------------------------------------------
-->> for host in `cat remotehost`; do echo $host; done
This  to print out the hosts 

-->> for host in `cat remotehost`; do ssh devops@$host; done
This is to login into the hosts servers 

-->> for host in `cat remotehost`; do ssh devops@$host uptime; done
show  the uptime for the servers. 

-->> scp testfile.txt devops@web01:/tmp/
-->> scp -i `/.ssh/id_rsa testfile.txt devops@web01:/tmp/
This is used to send files from host server to related servers.. 
-- The first one will work becasue the key has been used already. 












Using the multios_websetup.sh-- 
















































== Edit the vagrant file and uncomment the 
1. Private ip 
2. public ip 


















































